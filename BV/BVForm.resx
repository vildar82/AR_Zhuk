<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEREAAAEACADABQAAFgAAACgAAAARAAAAIgAAAAEACAAAAAAAAAAAABMLAAATCwAAAAEAAAAA
        AADFuuEAz8PlAIoA2gC9kb0A2tnaANvM2gDcxtMA+Pb3ANrX2ADPxcYA7+XmANzV1QDp5OQA2tXVAOLK
        yADXoZkA6NXQANfS0ADv3dMA79fIANTRzwDf2NMA6trNAOmyfwDcq38A4q98ANyqeQDq0bgA8rd0AMGy
        oQDjtm8A2MinAPf39gC1tq0AqreJAOLj4QDS2M0Auru6ANzj4ADN1dIAr724ANfi3wAAuokAu9rSAADA
        kgAAvZEAAL2SAAC7kgDu9/UAAMadAADBmQAAvZQAAL2WAAC9mAAAyqQAAMWhAADDoQAAwJ0Amd3QAKPd
        0wAAxaQAAMWmAAC9nQAAvZ4Agt7PAADOsAAAy60AAMqtAADFqwAAwKQAAMCmAAC9owCD2s8AidbLAADM
        twAA1L8AANPAAADLugAAvbIAlrSyAADFwAAAxsYA5OnpAM/T0wD3+PgAAMHNAADW6gAA0uUAANHkAADN
        4AAAvcwAALrKAIzc4gC0y80AANLmAADB1wAAw9cAAL3UABzD0wB03ecAb9LeAADK5gAAxeMAAMXeAADD
        3QAAwdsAbNztAJ7f6AAAyOoAAMXpAADI6AAAyOcAAMHkAADD5AAAxeQAAMHiAADA4AAAweAAAL/fAADA
        3wAAwd8AAL3eAAC73QAAvd0AALrbAAC92wAAutoAALbVAMHNzwAAxO4AAMjuAADB5wCg3+sAntrmAKbc
        5gDy9/gAp9PdALja4gC6ztMA7vf5AL/c5ADs9/oA7vf6AO32+QDM09YA9Pb3APf39wAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAf3d3d3d1eH59fE8aGCFze3XZ2gB0ZWdsbWlybnV2KBcZHXGCb8XGAHBtZGuEjIVmaGFfXRIV
        hmNQysgAVVpOKwoUgHlweoNiEQgpNi7XyAA4NzNKJwuQV15YVogNBCZLTKt/ADI9RjJJB5GNj4uOhyCS
        VDAwsqEAPkRFLUiTk5OTk5OTk5OTk5O3iQA/PC8iJJOTk5OTk5OTk5OTk9XSADRBHxwTk5OTk5OTk5OT
        k5OTwJIAR0AGAwWTk5OTk5OTk5OTk5PGnQAlIwACAZOTk5OTk5OTk5OTk8qkAAkMDg8Qk5OTk5OTk5OT
        k5OT3dMAU1IbHhaTk5OTk5OTk5OTk5PezwBNO4pbiZOTk5OTk5OTk5OTk8CkACpCWYFqk5OTk5OTk5OT
        k5OTzLcANTFRYFyTk5OTk5OTk5OTk5O0sgA5Q0UsOpOTk5OTk5OTk5OTk/j4AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAf/gAAH/4AAB/+AAAf/gAAH/4AAB/+AAAf/gAAH/4AAB/+AAAf/gAAH/4AA
</value>
  </data>
</root>